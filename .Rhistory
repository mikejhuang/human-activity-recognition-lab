fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
var
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(ols.slope)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varRes+varEst)
efit<-lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
?cov
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor<-lm(gpa_nor~gca_nor)
l_nor<-lm(gpa_nor~gch_nor)
l_nor<-lm(gch_nor~gpa_nor)
swirl()
library('swirl')
install.packages("swirl")
swirl()
library(swirl)
swirl
swirl()
swirl()
require(stats)
require(graphics)
pairs(mtcars,panel=panel.smooth,main="mtcars data")
summary(lm(mpg))
summary(lm(mpg~wt,mtcars))
summary(lm(mpg~cyl,mtcars))
summary(lm(mpg~disp,mtcars))
summary(lm(mpg~hp,mtcars))
summary(lm(mpg~drat,mtcars))
summary(lm(mpg~qsec,mtcars))
summary(lm(mpg~factor(vs),mtcars))
summary(lm(mpg~factor(am),mtcars))
summary(lm(mpg~factor(gear),mtcars))
summary(lm(mpg~factor(carb),mtcars))
length(mtcars)
fit<-lm(mpg~wt,mtcars)
summary(fit)
str(summary(fit))
summary(fit)[df]
summary(fit)(df)
summary(fit)[df]
summary(fit)$Pr(>|t|)
require(devtools)
library(Rcpp)
library(ggplot2)
library(caret)
data(iris)
names(iris)
summary(lm(mpg~wt,mtcars))
fit<-lm(mpg~wt,mtcars)
coef(fit)
fit
str(fit)
summary(fit)$coefficients[2,4]
summary(fit)$coefficients[2,4]
summary(fit)$coefficients[2,4]<0.05
names(mtcars)
names(mtcars)[2]
pvals<-0
for(var in 2:length(mtcars)){
if(var<7){
pvals[i]<-summary(lm(mpg~names(mtcars)[var],mtcars))$coefficients[2,4]
}
else{pvals[i]<-summary(lm(mpg~factor(names(mtcars)[var]),mtcars))$coefficients[2,4]}
}
for(var in 2:length(mtcars)){
var
if(var<7){
pvals[i]<-summary(lm(mpg~names(mtcars)[var],mtcars))$coefficients[2,4]
}
else{pvals[i]<-summary(lm(mpg~factor(names(mtcars)[var]),mtcars))$coefficients[2,4]}
}
for(var in 2:length(mtcars)){
var}
for(var in 2:length(mtcars)){
var}
var
for(var in 2:length(mtcars)){
print var}
print(var)
for(var in 2:length(mtcars)){
print(var)}
for(var in 2:length(mtcars)){
var
if(var<8){
pvals[i]<-summary(lm(mpg~names(mtcars)[var],mtcars))$coefficients[2,4]
}
}
pvals[2]<5
pvals[2]<-5
summary(lm(mpg~names(mtcars)[2],mtcars))$coefficients[2,4]
summary(lm(mpg~names(mtcars)[2],mtcars))
lm(mpg~names(mtcars)[2],mtcars)
names(mtcars)[2]
mpg~cyl
lm(mpg~cyl,mtcars)
lm(mtcars[1],mtcars[2])
mtcars[1]
lm(mtcars[1]~mtcars[2])
lm(mtcars[1]~mtcars[2],data=mtcars)
summary(lm(mpg~wt,mtcars))$coefficients[2,4]
names(mtcars)
pvals[1]<-summary(lm(mpg~wt,mtcars))$coefficients[2,4]
pvals[2]<-summary(lm(mpg~cyl,mtcars))$coefficients[2,4]
pvals[3]<-summary(lm(mpg~disp,mtcars))$coefficients[2,4]
pvals[4]<-summary(lm(mpg~hp,mtcars))$coefficients[2,4]
pvals[5]<-summary(lm(mpg~drat,mtcars))$coefficients[2,4]
pvals[6]<-summary(lm(mpg~qsec,mtcars))$coefficients[2,4]
pvals[7]<-summary(lm(mpg~factor(vs),mtcars))$coefficients[2,4]
pvals[8]<-summary(lm(mpg~factor(am),mtcars))$coefficients[2,4]
pvals[9]<-summary(lm(mpg~factor(gear),mtcars))$coefficients[2,4]
pvals[10]<-summary(lm(mpg~factor(carb),mtcars))$coefficients[2,4]
pvals
pvals<-data.frame(pvals)
pvals
names(pvals)<-c(names(mtcars)[2:10])
names(pvals)<-c(names(mtcars)[2:11])
names(pvals)<-c(names(mtcars)[2:12])
names(mtcars)[2:12]
names(mtcars)[2:11]
names(pvals)
row.names(pvals)
row.names(pvals)<-c(names(mtcars)[2:11])
pvals
names(pvals)<-mpg
names(pvals)<-'mpg'
pvals
pvals<0.05
pvals
row.names(pvals)<-c(names(mtcars)[2:11])
pvals
a<-df()
a<-df(0)
?df
t(pvals)
str(summary(fit))
summary(fit)$r.squared
rvals<-0
rvals[1]<-summary(lm(mpg~wt,mtcars))$r.squared
rvals[2]<-summary(lm(mpg~cyl,mtcars))$r.squared
rvals[3]<-summary(lm(mpg~disp,mtcars))$r.squared
rvals[4]<-summary(lm(mpg~hp,mtcars))$r.squared
rvals[5]<-summary(lm(mpg~drat,mtcars))$r.squared
rvals[6]<-summary(lm(mpg~qsec,mtcars))$r.squared
rvals[7]<-summary(lm(mpg~factor(vs),mtcars))$r.squared
rvals[8]<-summary(lm(mpg~factor(am),mtcars))$r.squared
rvals[9]<-summary(lm(mpg~factor(gear),mtcars))$r.squared
rvals[10]<-summary(lm(mpg~factor(carb),mtcars))$r.squared
pvals<-data.frame(pvals,rvals,pvals<0.05)
View(pvals)
View(pvals)
names(mtcars)
rank(pval$r^2)
rank(pvals$r^2)
rank(pvals$r^2,descending)
?rank
rank(pvals$r^2,na.last=TRUE)
rank(pvals$r^2,na.last=FALSE)
library(dplyr)
pvals
arrange(pvals,desc(R^2))
arrange(pvals,desc('R^2'))
arrange(pvals,desc('R^2'))
pvals$R^2
pvals$"R^2"
str(pvals)
names(pvals)<-c('p','p<0.05','R^2','dummy variable')
library(dplyr)
pvals<-0
pvals[1]<-summary(lm(mpg~factor(cyl),mtcars))$coefficients[2,4]
pvals[2]<-summary(lm(mpg~disp,mtcars))$coefficients[2,4]
pvals[3]<-summary(lm(mpg~hp,mtcars))$coefficients[2,4]
pvals[4]<-summary(lm(mpg~drat,mtcars))$coefficients[2,4]
pvals[5]<-summary(lm(mpg~wt,mtcars))$coefficients[2,4]
pvals[6]<-summary(lm(mpg~qsec,mtcars))$coefficients[2,4]
pvals[7]<-summary(lm(mpg~factor(vs),mtcars))$coefficients[2,4]
pvals[8]<-summary(lm(mpg~factor(am),mtcars))$coefficients[2,4]
pvals[9]<-summary(lm(mpg~factor(gear),mtcars))$coefficients[2,4]
pvals[10]<-summary(lm(mpg~factor(carb),mtcars))$coefficients[2,4]
dummy<-c(TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,TRUE)
pvals<-data.frame(pvals)
row.names(pvals)<-c(names(mtcars)[2:11])
names(pvals)<-'mpg'
rvals<-0
rvals[1]<-summary(lm(mpg~factor(cyl),mtcars))$r.squared
rvals[2]<-summary(lm(mpg~disp,mtcars))$r.squared
rvals[3]<-summary(lm(mpg~hp,mtcars))$r.squared
rvals[4]<-summary(lm(mpg~drat,mtcars))$r.squared
rvals[5]<-summary(lm(mpg~wt,mtcars))$r.squared
rvals[6]<-summary(lm(mpg~qsec,mtcars))$r.squared
rvals[7]<-summary(lm(mpg~factor(vs),mtcars))$r.squared
rvals[8]<-summary(lm(mpg~factor(am),mtcars))$r.squared
rvals[9]<-summary(lm(mpg~factor(gear),mtcars))$r.squared
rvals[10]<-summary(lm(mpg~factor(carb),mtcars))$r.squared
pvals<-data.frame(pvals,pvals<0.05,rvals,dummy)
names(pvals)<-c('p','p<0.05','R^2','dummy variable')
arrange(pvals,desc('R^2'))
pvals
str(pvals)
pvals$R^2
arrange(pvals,desc(R^2))
names(pvals)<-c('p','p<0.05','R2','dummy variable')
arrange(pvals,desc(R2))
summary(fit)
pvals
arrange(pvals)
pvals[order(pvals$R2)]
pvals[order(pvals$R2),]
?order
pvals[order(pvals$R2,decreasing=TRUE),]
install.packages('VIF')
vif(fit)
vif
VIF
corvif
?vif
library(vif)
library(VIF)
corvif
vif
vif(fit)
vif(lm(mpg~wt,mtcars))
?vif
vif(lm(mpg~wt,mtcars),trace=FALSE)
?runif
vif(fit)
fit
fit<-lm(mpg~wt,factor(cyl),disp,hp,drat,factor(cyl),mtcars)
fit<-lm(mpg~wt,factor(cyl),disp,hp,drat,factor(cyl),data=mtcars)
mtcars
fit<-lm(mpg~wt+factor(cyl)+disp+hp+drat+factor(cyl),data=mtcars)
fit
summary(fit)
vif(fit)
fit1<-lm(mpg~wt+factor(cyl)+disp+hp+drat+factor(cyl),data=mtcars)
vif(fit1)
library(car)
setwd('~/Documents/machinelearningassignment')
train<-read.csv('pml-training.csv')
test<-read.csv('pml-testing.csv')
library(caret)
library(doMC)
registerDoMC(cores=6)
test.noNa<-test[,colSums(is.na(test))==0]
train.noNa<-subset(train,select=c(names(test.noNa)[1:59],'classe'))
system.time(model  <- train(classe ~ ., data = train.noNa, method = "rf"))
predict(model,test.noNa)
predict(model,train.noNa)
table(train.noNa$classe,predict(model,train.noNa)
)
predict(model,test.noNa)
View(train.noNa)
View(train.noNa)
View(test.noNa)
View(test.noNa)
test.noNa<-select(test.noNa,-'user_name')
library(dplyr)
test.noNa<-select(test.noNa,-'user_name')
test.noNa<-select(test.noNa,-user_name)
View(test.noNa)
View(test.noNa)
test.noNa<-test[,colSums(is.na(test))==0]
test.noNa<-select(test.noNa,-c(user_name,problem_id))
View(test.noNa)
View(test.noNa)
test.noNa<-test[,colSums(is.na(test))==0]
test.noNa<-select(test.noNa,-c(user_name,problem_id,cvtd_timestamp,new_window,num_window))
train.noNa<-subset(train,select=c(names(test.noNa),'classe'))
system.time(model  <- train(classe ~ ., data = train.noNa, method = "rf"))
predict(model,test.noNa)
?randomForest
system.time(randomForest(classe~.,data=train.noNa,mtry=sqrt(55),ntree=100))
system.time(modelr<-randomForest(classe~.,data=train.noNa,mtry=sqrt(55),ntree=100))
predict(modelr,test.noNa)
confusionMatrix(predict(modelr,train.noNa),train.noNa$classe)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers<-predict(modelr,test.noNa)
pml_write_files(predict)
answers
pml_write_files(predict)
str(answers)
answers=rep("A",20)
answers
answers<-predict(modelr,test.noNa)
pml_write_files(answers)
system.time(modelr<-randomForest(classe~.,data=train.noNa,mtry=sqrt(55),ntree=500))
answers<-predict(modelr,test.noNa)
answers
table(train.noNa$classe)
table(predict(modelr,train.noNa))
View(train.noNa)
View(train.noNa)
View(test.noNa)
View(test.noNa)
test.noNa<-test[,colSums(is.na(test))==0]
test.noNa<-select(test.noNa,-c(user_name,problem_id,cvtd_timestamp,new_window,num_window,raw_timestamp_part_1,raw_timestamp_part_2))
train.noNa<-subset(train,select=c(names(test.noNa),'classe'))
length(test.noNa)
system.time(modelr<-randomForest(classe~.,data=train.noNa,mtry=sqrt(length(test.noNa)),ntree=500))
answers<-predict(modelr,test.noNa)
answers
inTrain<-createDataPartition(y=train.noNa$classe,p=0.7,list=FALSE)
training<-train.noNa[inTrain,]
testing<-train.noNa[-inTrain,]
system.time(modelr<-randomForest(classe~.,data=training,mtry=sqrt(length(training)),ntree=500))
confusionMatrix(predict(modelr,testing),testing$classe)
answers<-predict(modelr,test.noNa)
answers
names(test.noNa)
names(training)
answers<-predict(modelr,testing)
table(answers)
answers<-predict(modelr,test.noNa)
table(answers)
system.time(modelrpart<-train(classe~.data=training,method='rpart',preProcess='pca'))
system.time(modelrpart<-train(classe~.,data=training,method='rpart',preProcess='pca'))
confusionMatrix(predict(modelrpart,testing),testing$classe)
system.time(modelrpart<-train(classe~.,data=training,method='rpart'))
confusionMatrix(predict(modelrpart,testing),testing$classe)
answers<-predict(modelrpart,test.noNa)
answers
findCorrelation(training)
findCorrelation(testing)
findCorrelation(test.noNa)
?findCorrelation
corrMatrix <- diag(rep(1, 5))
corrMatrix[2, 3] <- corrMatrix[3, 2] <- .7
corrMatrix[5, 3] <- corrMatrix[3, 5] <- -.7
corrMatrix[4, 1] <- corrMatrix[1, 4] <- -.67
corrDF <- expand.grid(row = 1:5, col = 1:5)
corrDF$correlation <- as.vector(corrMatrix)
levelplot(correlation ~ row+ col, corrDF)
corrMatrix
corrDF
findCorrelation(corrMatrix, cutoff = .65, verbose = TRUE)
is.na(test.noNa)
test.noNa[is.na(test.noNa)]
test.noNa[is.na(test)]
head(test[is.na(test)])
str(test[is.na(test)])
training[is.na(training)])
training[is.na(training)]
training[is.na(training)]
str(train[is.na(train)])
str(train[is.na(train)])
confusionMatrix(predict(modelr,testing),testing$classe)
confusionMatrix(predict(modelr,training),training$classe)
confusionMatrix(predict(modelr,testing),testing$classe)
system.time(modelr<-randomForest(classe~.,data=training,mtry=sqrt(length(training)),ntree=500),preProcess='pca')
test$roll_best
test$roll_belt
test.noNa<-test[,colSums(is.na(test))==0]
test.noNa<-select(test.noNa,-c(user_name,problem_id,cvtd_timestamp,new_window,num_window,raw_timestamp_part_1,raw_timestamp_part_2,roll_belt))
train.noNa<-subset(train,select=c(names(test.noNa),'classe'))
inTrain<-createDataPartition(y=train.noNa$classe,p=0.7,list=FALSE)
training<-train.noNa[inTrain,]
testing<-train.noNa[-inTrain,]
system.time(modelr<-randomForest(classe~.,data=training,mtry=sqrt(length(training)),ntree=500))
confusionMatrix(predict(modelr,testing),testing$classe)
predict(modelr,test.noNa)
View(test.noNa)
View(test.noNa)
View(testing)
View(testing)
names(test)[-c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z")]
names(test)[-c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z"),]
names(test)
names(test)['-problem_id']
names(test)['-problem_id',]
names(test)[-'problem_id',]
names(test)[,-'problem_id']
test.clean<-subset(test,c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z"))
?subset
test.clean<-subset(test,select=c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z"))
test.noNa<-subset(test,select=c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
test.clean<-subset(test,select=c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
)
test.noNa<-subset(test,select=c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z"))
test.noNa<-subset(test,select=c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x","gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z","magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm","yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z","accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y","magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell","gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x","accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y","magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm","gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x","accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y","magnet_forearm_z"))
train.noNa<-subset(train,select=c(names(test.noNa),'classe'))
inTrain<-createDataPartition(y=train.noNa$classe,p=0.7,list=FALSE)
training<-train.noNa[inTrain,]
testing<-train.noNa[-inTrain,]
system.time(modelr<-randomForest(classe~.,data=training,mtry=sqrt(length(training)),ntree=500))
confusionMatrix(predict(modelr,testing),testing$classe)
answers<-predict(modelr,test.noNa)
answers
View(test.noNa)
View(test.noNa)
View(testing)
pml_write_files(answers)
test.noNaa<-test[,colSums(is.na(test))==0]
test.noNaa<-select(test.noNa,-c(user_name,problem_id,cvtd_timestamp,new_window,num_window,raw_timestamp_part_1,raw_timestamp_part_2,roll_belt))
test.noNaa<-test[,colSums(is.na(test))==0]
test.noNaa<-select(test.noNaa,-c(user_name,problem_id,cvtd_timestamp,new_window,num_window,raw_timestamp_part_1,raw_timestamp_part_2,roll_belt))
names(test.noNa)
names(test.noNaa)
View(test.noNaa)
View(test.noNaa)
View(test.clean)
View(test.clean)
View(train)
View(train)
test<-read.csv('pml-testing.csv',list=FALSE)
test<-read.csv('pml-testing.csv',header=FALSE)
View(test)
View(test)
test<-read.csv('pml-testing.csv')
train<-read.csv('pml-training.csv')
test<-read.csv('pml-testing.csv')
test.noNa<-test[,colSums(is.na(test))==0]
test.noNa<-select(test.noNa,-c(X,user_name,problem_id,cvtd_timestamp,new_window,num_window,raw_timestamp_part_1,raw_timestamp_part_2,roll_belt))
train.noNa<-subset(train,select=c(names(test.noNa),'classe'))
inTrain<-createDataPartition(y=train.noNa$classe,p=0.7,list=FALSE)
training<-train.noNa[inTrain,]
testing<-train.noNa[-inTrain,]
system.time(modelr<-randomForest(classe~.,data=train.noNa,mtry=sqrt(length(test.noNa)),ntree=500))
answers<-predict(modelr,test.noNa)
test.noNa<-test[,colSums(is.na(test))==0]
test.noNa<-select(test.noNa,-c(X,user_name,problem_id,cvtd_timestamp,new_window,num_window,raw_timestamp_part_1,raw_timestamp_part_2))
train.noNa<-subset(train,select=c(names(test.noNa),'classe'))
inTrain<-createDataPartition(y=train.noNa$classe,p=0.7,list=FALSE)
training<-train.noNa[inTrain,]
testing<-train.noNa[-inTrain,]
system.time(modelr<-randomForest(classe~.,data=train.noNa,mtry=sqrt(length(test.noNa)),ntree=500))
answers<-predict(modelr,test.noNa)
test.noNa<-test[,colSums(is.na(test))==0]
test.noNa<-select(test.noNa,-c(X,user_name,problem_id,cvtd_timestamp,new_window,num_window,raw_timestamp_part_1,raw_timestamp_part_2,roll_belt))
#test.noNa<-subset(test,select=c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x","gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z","magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm","yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z","accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y","magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell","gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x","accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y","magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm","gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x","accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y","magnet_forearm_z"))
train.noNa<-subset(train,select=c(names(test.noNa),'classe'))
inTrain<-createDataPartition(y=train.noNa$classe,p=0.7,list=FALSE)
training<-train.noNa[inTrain,]
testing<-train.noNa[-inTrain,]
system.time(modelr<-randomForest(classe~.,data=train.noNa,mtry=sqrt(length(test.noNa)),ntree=500))
answersnorollbelt<-predict(modelr,test.noNa)
answers
answersnorollbelt
?randomForest
modelr
str(modelr)
setwd('~/Documents/machinelearningassignment/')
